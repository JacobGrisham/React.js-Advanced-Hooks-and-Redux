{"version":3,"sources":["components/Scroll.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/ErrorBoundary.js","components/App.js","reportWebVitals.js","index.js"],"names":["Scroll","props","style","overflowY","border","height","children","Card","id","name","email","className","alt","src","CardList","robots","map","user","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2OAUeA,MARf,SAAgBC,GACd,OACE,qBAAKC,MAAO,CAAEC,UAAW,SAAUC,OAAQ,oBAAqBC,OAAQ,SAAxE,SACIJ,EAAMK,YCYCC,MAbf,YAAoC,IAApBC,EAAmB,EAAnBA,GAAIC,EAAe,EAAfA,KAAMC,EAAS,EAATA,MAExB,OACE,sBAAKC,UAAU,+CAAf,UACE,qBAAKC,IAAI,QAAQC,IAAG,+BAA2BL,EAA3B,cACpB,gCACE,6BAAMC,IACN,4BAAKC,WCkBEI,MA1Bf,YAA+B,IAAXC,EAAU,EAAVA,OAElB,OAEE,aADA,CACC,WAAD,UAIIA,EAAOC,KAAI,SAACC,EAAMC,GAChB,OACE,cAAC,EAAD,CAKEV,GAAKO,EAAOG,GAAGV,GACfC,KAAOM,EAAOG,GAAGT,KACjBC,MAAQK,EAAOG,GAAGR,OAHZK,EAAOG,GAAGV,UCFfW,MAbf,YAAkD,EAA7BC,YAA8B,IAAjBC,EAAgB,EAAhBA,aAChC,OACE,qBAAKV,UAAU,MAAf,SACE,uBACEW,KAAK,SACLC,YAAY,gBACZZ,UAAU,kBACVa,SAAWH,OCUJI,E,kDAhBb,WAAYxB,GAAO,IAAD,8BAChB,gBACKyB,MAAQ,CACXC,UAAU,GAHI,E,qDAOlB,SAAkBC,EAAOC,GACvBC,KAAKC,SAAS,CAAEJ,UAAU,M,oBAG5B,WACE,OAAOG,KAAKJ,MAAMC,SAAW,8DAAwCG,KAAK7B,MAAMK,a,GAbxD0B,aCoDbC,G,wDA3Cb,aAAe,IAAD,8BAEZ,gBAcFC,eAAiB,SAACC,GAChB,EAAKJ,SAAS,CACZX,YAAae,EAAMC,OAAOC,SAd5B,EAAKX,MAAQ,CACXX,OAAQ,GACRK,YAAa,IANH,E,qDAUd,WAAqB,IAAD,OAClBkB,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKX,SAAS,CAAChB,OAAQ2B,S,oBASxC,WAAU,IAAD,EACyBZ,KAAKJ,MAA7BX,EADD,EACCA,OAAQK,EADT,EACSA,YACVuB,EAAiB5B,EAAO6B,QAAO,SAAAC,GACnC,OAAOA,EAAMpC,KAAKqC,cAAcC,SAAS3B,EAAY0B,kBAGvD,OAAQ/B,EAAOiC,OACb,sBAAKrC,UAAU,KAAf,UACE,oBAAIA,UAAU,KAAd,yBAEA,cAAC,EAAD,CAAWU,aAAeS,KAAKI,iBAC/B,cAAC,EAAD,UACE,cAAC,EAAD,UACE,cAAC,EAAD,CAAUnB,OAAS4B,WAPH,gD,GA9BVX,cCGHiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.f7cf223f.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Scroll(props) {\n  return(\n    <div style={{ overflowY: 'scroll', border: '1px, solid, black', height: '600px' }}>\n      { props.children }\n    </div>\n  )\n}\n\nexport default Scroll;","import React from 'react';\n\n// Destructuring the properties and placing it in the parameters of the function for cleaner code\n// These properties, or props, were passed down from the parent component\nfunction Card({ id, name, email }) {\n\n  return(\n    <div className='bg-gray dib br3 pa3 ma2 grow bw2 shadow-5 tc'>\n      <img alt='robot' src={`https://robohash.org/${ id }?200x200`}></img>\n      <div>\n        <h2>{ name }</h2>\n        <p>{ email }</p>\n      </div>\n    </div>\n  )\n}\n\nexport default Card;","import React, {Fragment} from 'react';\nimport Card from './Card';\n\nfunction CardList({ robots }) {\n\n  return (\n    // Using Fragment to avoid unneccssary nesting of the DOM\n    <Fragment>\n      {\n        // Using the ES6 map function to iterate over the robots object\n        // map has two parameters, the object name and the index\n        robots.map((user, i) => {\n          return (\n            <Card\n              // These are the properties that get passed to the Card component\n              // The key prop shouldn't change. Therefore we'll use id instead of index or i\n              // The key prop is required for React to effeiciently target specific DOM elements\n              key={ robots[i].id }\n              id={ robots[i].id }\n              name={ robots[i].name }\n              email={ robots[i].email }\n            />\n          );\n        })\n      }\n    </Fragment>\n  );\n}\n\nexport default CardList;","import React from 'react';\n\nfunction SearchBox({ searchfield, searchChange }) {\n  return (\n    <div className=\"pa2\">\n      <input\n        type='search'\n        placeholder='search robots'\n        className='pa3 ba b--white'\n        onChange={ searchChange }>\n      </input>\n    </div>\n  )\n}\n\nexport default SearchBox;","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n  constructor(props){\n    super()\n    this.state = {\n      hasError: false\n    }\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true })\n  }\n\n  render() {\n    return this.state.hasError ? <h1>Oooops. Something went wrong</h1> : this.props.children\n  }\n}\n\nexport default ErrorBoundary;","import React, { Component } from 'react';\nimport Scroll from './Scroll'\nimport CardList from './CardList';\nimport SearchBox from './SearchBox'\nimport ErrorBoundary from './ErrorBoundary'\nimport '../assets/App.css';\n\n// the virtual DOM is just a javascript object that collects the state\n// React then passes the state to child components as props\nclass App extends Component {\n  // state represents properties that can change. They usually live in the parent component\n  constructor() {\n    // super() calls the constructor of component\n    super();\n    // the keyword this refers to class App\n    this.state = {\n      robots: [],\n      searchfield: ''\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({robots: users}));\n  }\n\n  onSearchChange = (event) => {\n    this.setState({\n      searchfield: event.target.value\n    });\n  }\n\n  render() {\n    const { robots, searchfield } = this.state;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n    })\n    \n    return !robots.length ? <h1>Loading...</h1> : (\n      <div className='tc'>\n        <h1 className='f1'>RoboFriends</h1>\n        {/* Since App is an object, we need to reference functions and properties as the keyword this */}\n        <SearchBox searchChange={ this.onSearchChange }/>\n        <Scroll>\n          <ErrorBoundary>\n            <CardList robots={ filteredRobots } />\n          </ErrorBoundary>\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}