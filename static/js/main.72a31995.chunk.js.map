{"version":3,"sources":["serviceWorkerRegistration.js","reportWebVitals.js","constants/constants.js","reducers/reducers.js","components/Header.js","components/Scroll.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/ErrorBoundary.js","components/App.js","actions/actions.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","CHANGE_SEARCHFIELD","REQUEST_USERS_PENDING","REQUEST_USERS_SUCCESS","REQUEST_USERS_FAILED","initialStateSearch","searchField","initialStateUsers","isPending","users","style","css","Header","PureComponent","Scroll","props","overflowY","height","children","Card","id","name","email","useState","favorite","setFavorite","useEffect","DetailsLazy","React","lazy","className","onClick","marginLeft","border","outline","backgroundColor","color","alt","src","fallback","CardList","robots","map","user","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","memo","ErrorBoundary","hasError","info","this","setState","Component","center","connect","searchRobots","requestUsers","dispatch","onSearchChange","event","text","target","value","payload","onRequestOfUsers","fetch","response","json","data","filteredRobots","filter","robot","toLowerCase","includes","logger","createLogger","rootRedcuer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"iMAYMA,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DAqCnC,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAACC,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,+GAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAACC,GACNL,QAAQK,MAAM,4CAA6CA,MC9FjE,I,EAYeC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,gBCPDO,EAAqB,qBAErBC,EAAwB,wBACxBC,EAAwB,wBACxBC,EAAuB,uBCG9BC,EAAqB,CACzBC,YAAa,IAaTC,EAAoB,CACxBC,WAAW,EACXC,MAAO,GACPjB,MAAO,I,uEClBHkB,EAAQC,YAAH,0WA8BIC,E,4JATb,WACE,OACE,0BACE,kBAAID,IAAKD,EAAT,+B,GALaG,iB,OCfNC,MARf,SAAgBC,GACd,OACE,qBAAKL,MAAO,CAAEM,UAAW,SAAUC,OAAQ,SAA3C,SACIF,EAAMG,Y,2DCiDCC,MA7Cf,YAAoC,IAApBC,EAAmB,EAAnBA,GAAIC,EAAe,EAAfA,KAAMC,EAAS,EAATA,MAGxB,EAAgCC,oBAAS,GAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KAQAC,qBAAU,WACRvC,QAAQC,IAAIoC,KAGX,CAACA,IAEJ,IAAMG,EAAcC,IAAMC,MAAK,kBAAM,gCAMrC,OACE,sBAAKC,UAAU,+CAAf,UACE,wBAAQC,QAnBY,WACtBN,GAAY,IAkB0Bf,MAAO,CAAEsB,WAAY,OAASC,OAAQ,OAAQC,QAAS,OAAQC,gBAAiB,eAApH,SACIX,EAAW,cAAC,IAAD,CAAqBd,MAAO,CAAE0B,MAAO,SAAc,cAAC,IAAD,MAElE,qBAAKC,IAAI,QAAQC,IAAG,+BAA2BlB,EAA3B,cACpB,sBAAKV,MAAO,CAAE0B,MAAO,SAArB,UACE,6BAAMf,IACN,4BAAKC,OAEP,wBAAQS,QAdW,WACrB5C,QAAQC,IAAI,YAaV,SACE,cAAC,IAAD,CAAgBsB,MAAO,CAAEuB,OAAQ,OAAQC,QAAS,OAAQC,gBAAiB,eAA3E,SACE,cAAC,WAAD,CAAUI,SAAU,6CAApB,SACE,cAACZ,EAAD,c,MCbGa,MAzBf,YAA+B,IAAXC,EAAU,EAAVA,OAElB,OACE,qBAAKX,UAAU,YAAf,SAIIW,EAAOC,KAAI,SAACC,EAAMC,GAChB,OACE,cAAC,EAAD,CAKExB,GAAKqB,EAAOG,GAAGxB,GACfC,KAAOoB,EAAOG,GAAGvB,KACjBC,MAAQmB,EAAOG,GAAGtB,OAHZmB,EAAOG,GAAGxB,UClB9B,SAASyB,EAAT,GAAkD,EAA7BC,YAA8B,IAAjBC,EAAgB,EAAhBA,aAChC,OACE,qBAAKjB,UAAU,MAAf,SACE,uBACEkB,KAAK,SACLC,YAAY,gBACZnB,UAAU,kBACVoB,SAAWH,MAOJI,I,EAAAA,iBAAKN,G,gCCGLO,E,kDAhBb,WAAYrC,GAAO,IAAD,8BAChB,gBACK9B,MAAQ,CACXoE,UAAU,GAHI,E,qDAOlB,SAAkB7D,EAAO8D,GACvBC,KAAKC,SAAS,CAAEH,UAAU,M,oBAG5B,WACE,OAAOE,KAAKtE,MAAMoE,SAAW,8DAAwCE,KAAKxC,MAAMG,a,GAbxDuC,aCgCtBC,EAAS/C,YAAH,mDAmCGgD,mBApDS,SAAA1E,GAGtB,MAAO,CACLqB,YAAarB,EAAM2E,aAAatD,YAChCG,MAAOxB,EAAM4E,aAAapD,MAC1BD,UAAWvB,EAAM4E,aAAarD,UAC9BhB,MAAOP,EAAM4E,aAAarE,UAGH,SAACsE,GAC1B,MAAO,CACLC,eAAgB,SAACC,GAAD,OAAWF,GCtBAG,EDsBwBD,EAAME,OAAOC,MCtB3B,CACvCnB,KAAM/C,EACNmE,QAASH,KAFmB,IAACA,GDuB3BI,iBAAkB,kBAAMP,GCjBM,SAACA,GACjCA,EAAS,CAAEd,KAAM9C,IACjBoE,MAAM,8CACL3F,MAAK,SAAA4F,GAAQ,OAAIA,EAASC,UAC1B7F,MAAK,SAAA8F,GAAI,OAAIX,EAAS,CAAEd,KAAM7C,EAAuBiE,QAASK,OAC9DlF,OAAM,SAAAC,GAAK,OAAIsE,EAAS,CAAEd,KAAM5C,EAAsBgE,QAAS5E,cDmDnDmE,EA7Bf,SAAa5C,GAEX,IAAQT,EAAoES,EAApET,YAAayD,EAAuDhD,EAAvDgD,eAAgBtD,EAAuCM,EAAvCN,MAAOD,EAAgCO,EAAhCP,UAAW6D,EAAqBtD,EAArBsD,iBAEvD3C,qBAAU,WACR2C,MAGC,CAACA,IAEJ,IAAMK,EAAiBjE,EAAMkE,QAAO,SAAAC,GAClC,OAAOA,EAAMvD,KAAKwD,cAAcC,SAASxE,EAAYuE,kBAGvD,OAAOrE,EAAY,kBAAIG,IAAK+C,EAAT,wBACjB,mBAAK/C,IAAK+C,EAAV,UACE,YAAC,EAAD,IAEA,YAAC,EAAD,CAAWX,aAAegB,IAC1B,YAAC,EAAD,UACE,YAAC,EAAD,UACE,YAAC,EAAD,CAAUtB,OAASiC,cE3CvBK,G,YAASC,0BAETC,EAAcC,YAAgB,CAAEtB,aTTV,WAA0C,IAAzC3E,EAAwC,uDAAlCoB,EAAoB8E,EAAc,uDAAP,GAC5D,OAAOA,EAAOnC,MACZ,KAAK/C,EACH,OAAOmF,OAAOC,OAAO,GAAIpG,EAAO,CAAEqB,YAAa6E,EAAOf,UAExD,QACE,OAAOnF,ISGuC4E,aTOxB,WAAyC,IAAxC5E,EAAuC,uDAAjCsB,EAAmB4E,EAAc,uDAAP,GAC3D,OAAOA,EAAOnC,MACZ,KAAK9C,EACH,OAAOkF,OAAOC,OAAO,GAAIpG,EAAO,CAAEuB,WAAW,IAC/C,KAAKL,EACH,OAAOiF,OAAOC,OAAO,GAAIpG,EAAO,CAAEwB,MAAO0E,EAAOf,QAAS5D,WAAW,IACtE,KAAKJ,EACH,OAAOgF,OAAOC,OAAO,GAAIpG,EAAO,CAAEO,MAAO2F,EAAOf,QAAS5D,WAAW,IACtE,QACE,OAAOvB,MSfPqG,EAAQC,YAAYN,EAAaO,YAAgBC,IAAiBV,IAExEW,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUN,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJO,SAASC,eAAe,SAM1BrG,IZfO,SAAkBlB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIuH,IAAIC,qCAAwB/H,OAAOC,SAAS+H,MACpDC,SAAWjI,OAAOC,SAASgI,OAIvC,OAGFjI,OAAOkI,iBAAiB,QAAQ,WAC9B,IAAM7H,EAAK,UAAM0H,qCAAN,sBAEPjI,IAgEV,SAAiCO,EAAOC,GAEtC+F,MAAMhG,EAAO,CACX8H,QAAS,CAAE,iBAAkB,YAE5BzH,MAAK,SAAC4F,GAEL,IAAM8B,EAAc9B,EAAS6B,QAAQE,IAAI,gBAEnB,MAApB/B,EAASgC,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5ChI,UAAUC,cAAcgI,MAAM9H,MAAK,SAACC,GAClCA,EAAa8H,aAAa/H,MAAK,WAC7BV,OAAOC,SAASyI,eAKpBtI,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IAAI,oEAtFVwH,CAAwBtI,EAAOC,GAI/BC,UAAUC,cAAcgI,MAAM9H,MAAK,WACjCQ,QAAQC,IACN,+GAMJf,EAAgBC,EAAOC,OYR/BsI,K","file":"static/js/main.72a31995.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const CHANGE_SEARCHFIELD = 'CHANGE_SEARCHFIELD';\n\nexport const REQUEST_USERS_PENDING = 'REQUEST_USERS_PENDING';\nexport const REQUEST_USERS_SUCCESS = 'REQUEST_USERS_SUCCESS';\nexport const REQUEST_USERS_FAILED = 'REQUEST_USERS_FAILED';","import { \n  CHANGE_SEARCHFIELD, \n  REQUEST_USERS_PENDING, \n  REQUEST_USERS_SUCCESS, \n  REQUEST_USERS_FAILED \n} from '../constants/constants.js';\n\nconst initialStateSearch = {\n  searchField: ''\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n  switch(action.type) {\n    case CHANGE_SEARCHFIELD:\n      return Object.assign({}, state, { searchField: action.payload });\n      // Can also do the following: return {...state, searchField: action.payload}}\n    default:\n      return state;\n  }\n}\n\nconst initialStateUsers = {\n  isPending: false,\n  users: [],\n  error: ''\n}\n\nexport const requestUsers = (state=initialStateUsers, action={}) => {\n  switch(action.type) {\n    case REQUEST_USERS_PENDING:\n      return Object.assign({}, state, { isPending: true })\n    case REQUEST_USERS_SUCCESS:\n      return Object.assign({}, state, { users: action.payload, isPending: false })\n    case REQUEST_USERS_FAILED:\n      return Object.assign({}, state, { error: action.payload, isPending: false })\n    default:\n      return state\n  }\n}","// this comment tells babel to convert jsx to calls to a function called jsx instead of React.createElement\n// Had to debug standard import statement. See https://github.com/emotion-js/emotion/issues/2041#issuecomment-708263981\n/** @jsxImportSource @emotion/react */\nimport { jsx, css } from '@emotion/react';\nimport React, { PureComponent, Fragment } from 'react';\n\nconst style = css`\n  @font-face: {\n    font-family: 'SEGA LOGO FONT';\n    font-style: normal;\n    font-weight: normal;\n    src: local(''), url('/fonts/SEGA.woff') format('woff2');\n  }\n\n  h1 {\n    font-family: 'SEGA LOGO FONT';\n    font-weight: 200;\n    color: lightgrey;\n    @media (min-width: 420px) {\n        font-size: 50px;\n    }\n  }\n`\n\n// Prevent re-rendering of component using Class-based Pure Component when there are no changes\nclass Header extends PureComponent {\n\n  render() {\n    return (\n      <>\n        <h1 css={style}>RoboFriends</h1>\n      </>\n    )\n  }\n}\n\nexport default Header;","import React from 'react';\n\nfunction Scroll(props) {\n  return(\n    <div style={{ overflowY: 'scroll', height: '600px' }}>\n      { props.children }\n    </div>\n  )\n}\n\nexport default Scroll;","// React\nimport React, { useState, useEffect, Suspense } from 'react';\n// Icons\nimport FavoriteBorderRoundedIcon from '@material-ui/icons/FavoriteBorderRounded';\nimport FavoriteRoundedIcon from '@material-ui/icons/FavoriteRounded';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n\n// Destructuring the properties and placing it in the parameters of the function for cleaner code\n// These properties, or props, were passed down from the parent component\nfunction Card({ id, name, email }) {\n\n  // Creating state with React Hooks\n  const [favorite, setFavorite] = useState(false);\n\n  // Setting state with React Hooks\n  const onClickFavorite = () => {\n    setFavorite(true)\n  }\n\n  // Telling React when to update state with React Hooks\n  useEffect(() => {\n    console.log(favorite);\n    // The second argument tells useEffect what to listen for to trigger an update\n    // Only run when favorite changes\n  }, [favorite])\n\n  const DetailsLazy = React.lazy(() => import('./Details'))\n\n  const onClickDetails = () => {\n    console.log('clicked');\n  }\n\n  return(\n    <div className='bg-gray dib br3 pa3 ma2 grow bw2 shadow-5 tc'>\n      <button onClick={ onClickFavorite } style={{ marginLeft: 'auto',  border: 'none', outline: 'none', backgroundColor: 'transparent'}}>\n        { favorite ? <FavoriteRoundedIcon style={{ color: 'red' }} /> : <FavoriteBorderRoundedIcon/>}\n      </button>\n      <img alt='robot' src={`https://robohash.org/${ id }?200x200`}></img>\n      <div style={{ color: 'white' }}>\n        <h2>{ name }</h2>\n        <p>{ email }</p>\n      </div>\n      <button onClick={ onClickDetails }>\n        <ExpandMoreIcon style={{ border: 'none', outline: 'none', backgroundColor: 'transparent'}}>\n          <Suspense fallback={<div>Loading...</div>}>\n            <DetailsLazy />\n          </Suspense>\n        </ExpandMoreIcon>\n      </button>\n    </div>\n\n  )\n}\n\nexport default Card;","// React\nimport React from 'react';\n// Components\nimport Card from './Card';\n// Stylesheets\nimport '../assets/CardList.css';\n\nfunction CardList({ robots }) {\n\n  return (\n    <div className='Card-list'>\n      {\n        // Using the ES6 map function to iterate over the robots object\n        // map has two parameters, the object name and the index\n        robots.map((user, i) => {\n          return (\n            <Card\n              // These are the properties that get passed to the Card component\n              // The key prop shouldn't change. Therefore we'll use id instead of index or i\n              // The key prop is required for React to effeiciently target specific DOM elements\n              key={ robots[i].id }\n              id={ robots[i].id }\n              name={ robots[i].name }\n              email={ robots[i].email }\n            />\n          );\n        })\n      }\n    </div>\n  );\n}\n\nexport default CardList;","import React, { memo } from 'react';\n\nfunction SearchBox({ searchfield, searchChange }) {\n  return (\n    <div className=\"pa2\">\n      <input\n        type='search'\n        placeholder='search robots'\n        className='pa3 ba b--white'\n        onChange={ searchChange }>\n      </input>\n    </div>\n  )\n}\n\n// Prevent re-rendering of Searchbox using React.memo when there are no changes\nexport default memo(SearchBox);","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n  constructor(props){\n    super()\n    this.state = {\n      hasError: false\n    }\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true })\n  }\n\n  render() {\n    return this.state.hasError ? <h1>Oooops. Something went wrong</h1> : this.props.children\n  }\n}\n\nexport default ErrorBoundary;","// this comment tells babel to convert jsx to calls to a function called jsx instead of React.createElement\n// Had to debug standard import statement. See https://github.com/emotion-js/emotion/issues/2041#issuecomment-708263981\n/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react'\n// React\nimport React, { useEffect } from 'react';\n// Redux\nimport { connect } from 'react-redux';\nimport { setSearchfield, requestUsers } from '../actions/actions';\n// Components\nimport Header from './Header';\nimport Scroll from './Scroll';\nimport CardList from './CardList';\nimport SearchBox from './SearchBox';\nimport ErrorBoundary from './ErrorBoundary';\n\n// Redux connect() parameter definitions\nconst mapStateToProps = state => {\n  // These states come from reducers.js\n  // The key is the state and the value is the property\n  return {\n    searchField: state.searchRobots.searchField,\n    users: state.requestUsers.users,\n    isPending: state.requestUsers.isPending,\n    error: state.requestUsers.error\n  }\n}\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchfield(event.target.value)),\n    onRequestOfUsers: () => dispatch(requestUsers())\n  }\n}\n\nconst center = css`\n  text-align: center;\n`\n\n// the virtual DOM is just a javascript object that collects the state\n// React then passes the state to child components as props\nfunction App(props) {\n\n  const { searchField, onSearchChange, users, isPending, onRequestOfUsers } = props\n\n  useEffect(() => {\n    onRequestOfUsers();\n    // The second argument tells useEffect what to listen for to trigger an update\n    // An empty array is a shortcut for componentDidMount\n  }, [onRequestOfUsers])\n\n  const filteredRobots = users.filter(robot => {\n    return robot.name.toLowerCase().includes(searchField.toLowerCase());\n  })\n  \n  return isPending ? <h1 css={center}>Loading...</h1> : (\n    <div css={center}>\n      <Header />\n      {/* Since App is an object, we need to reference functions and properties as the keyword this */}\n      <SearchBox searchChange={ onSearchChange }/>\n      <Scroll>\n        <ErrorBoundary>\n          <CardList robots={ filteredRobots }/>\n        </ErrorBoundary>\n      </Scroll>\n    </div>\n  );\n}\n\n// Connect App component to Redux\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { \n  CHANGE_SEARCHFIELD, \n  REQUEST_USERS_PENDING, \n  REQUEST_USERS_SUCCESS, \n  REQUEST_USERS_FAILED \n} from '../constants/constants.js';\n\nexport const setSearchfield = (text) => ({\n  type: CHANGE_SEARCHFIELD,\n  payload: text\n})\n\n// This is a higher order function: a function that returns a function\nexport const requestUsers = () => (dispatch) => {\n  dispatch({ type: REQUEST_USERS_PENDING })\n  fetch('https://jsonplaceholder.typicode.com/users')\n  .then(response => response.json())\n  .then(data => dispatch({ type: REQUEST_USERS_SUCCESS, payload: data }))\n  .catch(error => dispatch({ type: REQUEST_USERS_FAILED, payload: error }))\n}\n","// React\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n// Redux\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { searchRobots, requestUsers } from './reducers/reducers';\n// Redux Middleware\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\n// Components\nimport App from './components/App';\n// Styling\nimport './assets/index.css';\nimport 'tachyons';\n\nconst logger = createLogger();\n\nconst rootRedcuer = combineReducers({ searchRobots, requestUsers });\nconst store = createStore(rootRedcuer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();"],"sourceRoot":""}